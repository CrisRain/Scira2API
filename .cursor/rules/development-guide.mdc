---
description: 
globs: 
alwaysApply: true
---
# 开发指南

## 项目结构最佳实践

### 代码组织
- **service/**: 业务逻辑层，每个功能模块单独文件
- **models/**: 数据模型，使用 OpenAI 兼容的结构
- **middleware/**: 中间件，关注点分离
- **pkg/**: 可复用的公共包
- **config/**: 配置管理，支持环境变量

### 文件命名规则
- 服务层文件：按功能命名（如 `chat.go`, `stream.go`）
- 中间件文件：以 middleware 为后缀
- 包名与目录名保持一致

## 开发规范

### 错误处理
- 使用 `pkg/errors/` 中定义的业务错误类型
- 遵循 Go 标准错误处理模式
- 在服务层进行错误包装和上下文添加

### 日志记录
- 使用项目的日志系统（`log/` 目录）
- 记录关键操作和错误信息
- 包含足够的上下文信息用于调试

### HTTP 处理
- 使用 Gin 框架进行路由和中间件管理
- 在 [main.go](mdc:main.go) 中集中配置路由
- 业务逻辑在 service 层实现

## 部署相关文件
- [Dockerfile](mdc:Dockerfile): Docker 容器构建配置
- [docker-compose.yml](mdc:docker-compose.yml): 服务编排配置
- [deploy.sh](mdc:deploy.sh): 部署脚本

## 开发工具
- Go 1.24.2 或更高版本
- 依赖管理使用 Go Modules
- 支持 Docker 容器化部署

## 测试建议
- 对核心业务逻辑编写单元测试
- 使用 HTTP 测试工具验证 API 端点
- 验证 OpenAI 兼容性

